// @dart=2.9


List<List<String>> quesTags = [
  //Ram
  ['كسر' ,'حرق' ,'ذاكر' ,'عشوائي' ,'رام', 'ram', 'ضرر', 'تلف', 'RAM'],
  ['وقف' ,'ذاكر' ,'عشوائي', 'ram', 'سلام', 'مادي', 'RAM'],
  ['توافق' , 'شرائح', 'ذاكر', 'عشوائي', 'ram', 'RAM'],
  ['تشغيل', 'مكون', 'قدر', 'حد', 'دنى', 'متطلب'],
  ['ضعف', 'داء', 'ستجاب', 'سرع', 'وضوح', 'وامر', 'برامج', 'لعاب', 'ستهلك'],
  ['عاد', 'تشغيل', 'reboot', 'restart'],
  ['شاش', 'موت', 'زرق', 'ظهور', 'blue', 'screen'],
  // CPU
];

List <String> question = [
  //Ram
  'الضرر المادى للذاكرة العشوائية ككسر أو حرق',
  'توقف الذاكرة العشائية عن العمل بالرغم من سلامتها مادياً',
  'توقف الكمبيوتر عن العمل و عرض رسالة تفيد عدم توافق شرائح الذاكرة معاً',
  'ظهور رسالة تفيد بأن الكمبيوتر لا يقابل الحد الأدنى لمتطلبات التشغيل',
  'ضعف أداء الجهاز و عدم استجابته السريعة للأوامر و ظهور مشكلة بوضوح فى الألعاب و البرامج التى تستهلك الذاكرة العشوائية بحجم كبير؟',
  'إعادة تشغيل الجهاز بشكل متكرر بدون أى سابق إنذار؟',
  'ظهور شاشة الموت الزرقاء Blue Screen Of Death',
  // CPU
];

List<List<String>> answer = [
  // Ram
  ['ربما يكون مستخدم الكمبيوتر أو القائم بعملية الصيانة هو السبب الرئيسي فيها، حيث تكون الذاكرة العشوائية سليمة و تحتاج إلى صيانة كالتنظيف مثلا ثم تُكسر مما يؤدى إلى تلفها كمكون مادى و توقفها عن العمل، خاصة و أن الذاكرة العشوائية عبارة عن شريحة إلكترونية ضعيفة بعض الشيء و كذلك قد تتعرض الذاكرة العشوائية لتيار كهربائي عنيف أو درجة حرارة مرتفعة جداً يجب استبدال الذاكرة العشوائية بأخرى جديدة'],
  [
    ':أسباب هذه المشكلة: الكهرباء- الكهرباء الساكنة- الحرارة المرتفعة – زيادة تردد تشغيل المعالج – الفيروسات – التركيب الخاطئ للذاكرة العشوائية باللوحة الأم و لحلها',
    '1- تأكد من تركيب الذاكرة العشوائية بشكل سليم فى اللوحة الأم',
    '2- تنظيف شقوق تركيب الذاكرة باللوحة الأم',
    '3- نظف الذاكرة العشوائية نفسها و خاصة من الأسفل',
    '4- جرب الذاكرة العشوائية رام على لوحة أم أخرى أو جهلز كمبيوتر آخر  للتأكد من تلفها',
    '5- للتغلب على ارتفاع درجة الحرارة استخدم مع الذاكرة العشوائية مشتت أو مبدد للحرارة',
    '6- تأكد من خلو الكمبيوتر من الفيروسات، استخدم برامج الحماية المناسبة'
  ],
  ['عند ترقية الذاكرة العشوائية للكمبيوتر بإضافة شرائح ذاكرة عشوائية جديدة يمكن أن تظهر هذه المشكلة، أو عند إضافة ذاكرة عشوائية جديدة و اللوحة الأم بها الحد الأقصى للرام لحل هذه المشكلة؛ يجب التعرف على الحد الأقصى لحجم الذاكرة العشوائية التى يمكن تركيبها باللوحة الأم والتعرف على البيانات التفصيلية لشريحة الذاكرة القديمة مثل حجمها، و سرعة نقل بياناتها و حاول الحصول على ذاكرة عشوائية مماثلة لها تماماً'],
  ['ذلك عندما تكون كمية الذاكرة العشوائية قليلة فلا تعمل العديد من المكونات المادية و البرامج و الألعاب على جهاز الكمبيوتر  و السبب فى ذلك يرجع إلى عدم مقابلة الكمبيوتر للحد الأدنى لمتطلبات تشغيلها،و يتمثل حل هذه المشكلة فى زيادة حجم و كمية الذاكرة العشوائية للكمبيوتر'],
  ['إذا كانت كمية و حجم الذاكرة العشوائية قليلة يؤدى ذلك إلى نقصان و ضعف أداء الجهاز،يتمثل حل هذه المشكلة فى زيادة حجم و كمية الذاكرة العشوائية للكمبيوتر'],
  ['و هذه علامة لخطأ فى الذاكرة العشوائية، وربما تتكرر العملية أكثر من مرة و ربما لا تستطيع الدخول للويندوز من الأساس و لحل هذه المشكلة يجب عليك فحص الذاكرة العشوائية, إذا تأكدت من تلف الذاكرة العشوائبة و جب عليك تغيرها بأخرى'],
  ['عند ظهورها تضطرك إلى إعادة تشغيل الجهاز ولا مفر من ذلك، و ربما يتلف نظام التشغيل بسبب تكرار ظهور تلك الشاشة و لكن الأمر الحسن فى هذه المشكلة أنه يمكنك قراءة رسالة الخطأ قبل إعادة تشغيل الكمبيوتر للتأكد من أنها بسبب الذاكرة العشوائية لحل هذه المشكلة يجب عليك فحص الذاكرة العشوائية،إذا تأكدت من تلف الذاكرة العشوائية و جب عليك تغيرها بأخرى'],
  // CPU
];


List<String> checkQuestion(String userInput){
  double maxPercent = 0;
  int maxIndex = -1;
  double quesPercent;
  for(int i = 0; i < quesTags.length; i++){
    quesPercent = calPercent(userInput, i);
    if(quesPercent > maxPercent){
      maxPercent = quesPercent;
      maxIndex = i;
    }
  }
  
  if(maxPercent > 20)
    return answer[maxIndex];
  else{
    if(maxIndex != -1) {
      List<String> ans = answer[maxIndex];
      ans.insert(0, "هل تقصد " + question[maxIndex] + "؟");
      return ans; 
    }
    else 
      return ["غير موجود حاول مرة اخرى"];
  }
}


double calPercent(String userInput, int index){
  int cnt = 0;
  int quesWords =  quesTags[index].length;
  for(int i = 0; i < quesWords; i++){
    if(userInput.contains(quesTags[index][i])){
      cnt++;
    }
  }

  return (cnt.toDouble() / quesWords.toDouble()) * 100.0;
}